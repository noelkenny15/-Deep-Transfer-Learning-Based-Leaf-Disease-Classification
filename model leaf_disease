

import tensorflow as tf
import os 
import numpy as np
from keras.preprocessing.image import load_img,img_to_array,array_to_img
from keras.utils import to_categorical
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from keras.callbacks import Callback,EarlyStopping
     

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle.json
 
!kaggle datasets download -d vipoooool/new-plant-diseases-dataset
     
chmod: cannot access '/root/.kaggle.json': No such file or directory
Warning: Your Kaggle API key is readable by other users on this system! To fix this, you can run 'chmod 600 /root/.kaggle/kaggle.json'
Downloading new-plant-diseases-dataset.zip to /content
100% 2.69G/2.70G [00:40<00:00, 56.5MB/s]
100% 2.70G/2.70G [00:41<00:00, 70.6MB/s]

from zipfile import ZipFile
with ZipFile('/content/new-plant-diseases-dataset.zip', 'r') as zipObj: zipObj.extractall()
     

n_of_image,label_name = 650,['Apple scab', 'Apple Black rot', 'Apple Cedar apple rust', 'Apple healthy', 'Cherry Powdery mildew',
         'Cherry healthy','Corn Cercospora leaf spot Gray leaf spot', 'Corn Common rust', 'Corn Northern Leaf Blight','Corn healthy', 
         'Grape Black rot', 'Grape Esca', 'Grape Leaf blight', 'Grape healthy','Peach Bacterial spot','Peach healthy', 'Pepper bell Bacterial spot', 
         'Pepper bell healthy', 'Potato Early blight', 'Potato Late blight', 'Potato healthy', 'Strawberry Leaf scorch', 'Strawberry healthy',
         'Tomato Bacterial spot', 'Tomato Early blight', 'Tomato Late blight', 'Tomato Leaf Mold', 'Tomato Septoria leaf spot',
         'Tomato Spider mites', 'Tomato Target Spot', 'Tomato Yellow Leaf Curl Virus', 'Tomato mosaic virus', 'Tomato healthy']
                              
img,label,img_size = [],[],(150,150)

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Apple___Apple_scab'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(0) # Apple___Apple_scab

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Apple___Black_rot'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(1) # Apple___Black_rot

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Apple___Cedar_apple_rust'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(2) # Apple___Cedar_apple_rust

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Apple___healthy'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(3) # Apple___healthy

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Cherry_(including_sour)___Powdery_mildew'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(4) # Cherry_(including_sour)___Powdery_mildew

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Cherry_(including_sour)___healthy'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(5) #Cherry_(including_sour)___healthy

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(6) # Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Corn_(maize)___Common_rust_'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(7) # Corn_(maize)___Common_rust_

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Corn_(maize)___Northern_Leaf_Blight'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(8) # Corn_(maize)___Northern_Leaf_Blight

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Corn_(maize)___healthy'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(9) # Corn_(maize)___healthy

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Grape___Black_rot'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(10) # Grape___Black_rot

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Grape___Esca_(Black_Measles)'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(11) # Grape___Esca_(Black_Measles)

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Grape___Leaf_blight_(Isariopsis_Leaf_Spot)'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(12) # Grape___Leaf_blight_(Isariopsis_Leaf_Spot)

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Grape___healthy'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(13) # Grape___healthy

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Peach___Bacterial_spot'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(14) # Peach___Bacterial_spot

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Peach___healthy'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(15) # Peach___healthy

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Pepper,_bell___Bacterial_spot'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(16) # Pepper,_bell___Bacterial_spot

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Pepper,_bell___healthy'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(17) # Pepper,_bell___healthy

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Potato___Early_blight'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(18) # Potato___Early_blight

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Potato___Late_blight'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(19) # Potato___Late_blight

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Potato___healthy'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(20) # Potato___healthy

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Strawberry___Leaf_scorch'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(21) # Strawberry___Leaf_scorch

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Strawberry___healthy'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(22) # Strawberry___healthy

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Tomato___Bacterial_spot'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(23) # Tomato___Bacterial_spot

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Tomato___Early_blight'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(24) # Tomato___Early_blight

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Tomato___Late_blight'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(25) # Tomato___Late_blight

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Tomato___Leaf_Mold'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(26) # Tomato___Leaf_Mold

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Tomato___Septoria_leaf_spot'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(27) # Tomato___Septoria_leaf_spot

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Tomato___Spider_mites Two-spotted_spider_mite'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(28) # Tomato___Spider_mites Two-spotted_spider_mite

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Tomato___Target_Spot'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(29) # Tomato___Target_Spot

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Tomato___Tomato_Yellow_Leaf_Curl_Virus'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(30) # Tomato___Tomato_Yellow_Leaf_Curl_Virus

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Tomato___Tomato_mosaic_virus'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(31) # Tomato___Tomato_mosaic_virus

path_dir = '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train/Tomato___healthy'
os.chdir(path_dir)
img_path_list = os.listdir(path_dir)
for len_no,img_path in enumerate(img_path_list):
  if len_no == n_of_image:break
  else:
    img.append(img_to_array(load_img(img_path,target_size=img_size))/255)
    label.append(32) # Tomato___healthy

img,label = np.array(img),np.array(label)
     

IMG_SHAPE = img_size
vgg = tf.keras.applications.vgg16.VGG16(weights='imagenet', include_top=False, input_shape=IMG_SHAPE)
     

vgg.summary()
     
Model: "vgg16"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         [(None, 150, 150, 3)]     0         
_________________________________________________________________
block1_conv1 (Conv2D)        (None, 150, 150, 64)      1792      
_________________________________________________________________
block1_conv2 (Conv2D)        (None, 150, 150, 64)      36928     
_________________________________________________________________
block1_pool (MaxPooling2D)   (None, 75, 75, 64)        0         
_________________________________________________________________
block2_conv1 (Conv2D)        (None, 75, 75, 128)       73856     
_________________________________________________________________
block2_conv2 (Conv2D)        (None, 75, 75, 128)       147584    
_________________________________________________________________
block2_pool (MaxPooling2D)   (None, 37, 37, 128)       0         
_________________________________________________________________
block3_conv1 (Conv2D)        (None, 37, 37, 256)       295168    
_________________________________________________________________
block3_conv2 (Conv2D)        (None, 37, 37, 256)       590080    
_________________________________________________________________
block3_conv3 (Conv2D)        (None, 37, 37, 256)       590080    
_________________________________________________________________
block3_pool (MaxPooling2D)   (None, 18, 18, 256)       0         
_________________________________________________________________
block4_conv1 (Conv2D)        (None, 18, 18, 512)       1180160   
_________________________________________________________________
block4_conv2 (Conv2D)        (None, 18, 18, 512)       2359808   
_________________________________________________________________
block4_conv3 (Conv2D)        (None, 18, 18, 512)       2359808   
_________________________________________________________________
block4_pool (MaxPooling2D)   (None, 9, 9, 512)         0         
_________________________________________________________________
block5_conv1 (Conv2D)        (None, 9, 9, 512)         2359808   
_________________________________________________________________
block5_conv2 (Conv2D)        (None, 9, 9, 512)         2359808   
_________________________________________________________________
block5_conv3 (Conv2D)        (None, 9, 9, 512)         2359808   
_________________________________________________________________
block5_pool (MaxPooling2D)   (None, 4, 4, 512)         0         
=================================================================
Total params: 14,714,688
Trainable params: 14,714,688
Non-trainable params: 0
_________________________________________________________________

vgg.trainable = False
     

import pandas as pd

pd.set_option('max_colwidth', -1)

layer_vgg = [(layer, layer.name, layer.trainable) for layer in vgg.layers]
pd.DataFrame(layer_vgg, columns=['Layer Type', 'Layer Name', 'Layer Trainable'])
     
/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: FutureWarning: Passing a negative integer is deprecated in version 1.0 and will not be supported in future version. Instead, use None to not limit the column width.
  This is separate from the ipykernel package so we can avoid doing imports until
Layer Type	Layer Name	Layer Trainable
0	<tensorflow.python.keras.engine.input_layer.InputLayer object at 0x7f04bdef4550>	input_1	False
1	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd61b710>	block1_conv1	False
2	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd4244a8>	block1_conv2	False
3	<tensorflow.python.keras.layers.pooling.MaxPooling2D object at 0x7f04bd5dba90>	block1_pool	False
4	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd5e0b38>	block2_conv1	False
5	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd5dbc88>	block2_conv2	False
6	<tensorflow.python.keras.layers.pooling.MaxPooling2D object at 0x7f04bd5e7cc0>	block2_pool	False
7	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd5eddd8>	block3_conv1	False
8	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd5f9518>	block3_conv2	False
9	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd5f96d8>	block3_conv3	False
10	<tensorflow.python.keras.layers.pooling.MaxPooling2D object at 0x7f04bd5ffeb8>	block3_pool	False
11	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd609b70>	block4_conv1	False
12	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd5ff1d0>	block4_conv2	False
13	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd60ee48>	block4_conv3	False
14	<tensorflow.python.keras.layers.pooling.MaxPooling2D object at 0x7f04bd4a3550>	block4_pool	False
15	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd4bd4a8>	block5_conv1	False
16	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd4a3cc0>	block5_conv2	False
17	<tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7f04bd4bdf28>	block5_conv3	False
18	<tensorflow.python.keras.layers.pooling.MaxPooling2D object at 0x7f04bd4c72e8>	block5_pool	False

average_pool = tf.keras.layers.GlobalAveragePooling2D()

prediction = tf.keras.Sequential([
                tf.keras.layers.Flatten(),
                tf.keras.layers.Dense(33,activation='softmax')           
])


tl_model = tf.keras.Sequential([
  vgg,
  average_pool,
  prediction,
  ])
     

tl_model.compile(optimizer=tf.keras.optimizers.Adam(),
              loss='categorical_crossentropy',
              metrics=['accuracy'])
     

img,img_test,label,label_test = train_test_split(img,label,test_size=0.25,random_state=10)
     

os.chdir('/content')
     

class mycallback(Callback):
  def on_train_end(self,epoch,log={}):
    if (log.get('val_accuracy') >= '0.90'):
      print('Reached 90.9% accuracy so cancelling training')
      self.model.stop_training = True
          
castom_call = mycallback()

early_stop = EarlyStopping(monitor='val_accuracy', patience=3)


tl_model.fit(img,to_categorical(label), epochs=5, validation_data=(img_test,to_categorical(label_test)) )
            #,callbacks = [castom_call,early_stop])
     
Epoch 1/5
503/503 [==============================] - 47s 94ms/step - loss: 0.1576 - accuracy: 0.9613 - val_loss: 0.3448 - val_accuracy: 0.8846
Epoch 2/5
503/503 [==============================] - 48s 95ms/step - loss: 0.1565 - accuracy: 0.9607 - val_loss: 0.3418 - val_accuracy: 0.8870
Epoch 3/5
503/503 [==============================] - 47s 94ms/step - loss: 0.1553 - accuracy: 0.9615 - val_loss: 0.3430 - val_accuracy: 0.8851
Epoch 4/5
503/503 [==============================] - 48s 95ms/step - loss: 0.1540 - accuracy: 0.9608 - val_loss: 0.3433 - val_accuracy: 0.8876
Epoch 5/5
503/503 [==============================] - 48s 95ms/step - loss: 0.1533 - accuracy: 0.9623 - val_loss: 0.3419 - val_accuracy: 0.8859
<tensorflow.python.keras.callbacks.History at 0x7f016537b898>

#tl_model.save('Leaf Deases(96,88).h5')
     

for i in range(50):
    plt.imshow(img_test[i])
    plt.ylabel(label_test[i])
    img = img_test[i]
    pr = tl_model.predict(img.reshape((1,)+img.shape)) 
    plt.xlabel(np.argmax(pr))
    plt.show()
    plt.close()
     
